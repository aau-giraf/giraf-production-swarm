version: '3.7'

services:
    PROXY:
        image: nginx:1.15 # this will use the latest version of 1.15.x
        ports:
            - '80:80'     # expose 80 on the host and sents it to 80 in the container
            - '443:443'   # expose 443 on the host and sents it to 443 in the container
        volumes: # mounts the nginx config folder inside the container
            - /swarm-nfs/nginx/:/etc/nginx/:r
        networks:         # uses the frontend network to pass trafic into the containers
            - frontend
        deploy:
            replicas: 3
        healthcheck:
            test: ["CMD-SHELL", "service nginx status || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 3

    API_LEGACY:
        image: giraf/web-api:1  # this will use an locally build image of the API it sould be moved to hub.docker.com once the API is ready for production.
        networks:         # uses both the frontend and backend network
            - frontend
            - backend
        environment:
            ASPNETCORE_ENVIRONMENT: Production
        deploy:
            replicas: 3
        volumes:
            - /swarm-nfs/cdn/pictograms/:/pictograms
            - /swarm-nfs/api/appsettings.Develop.json:/srv/appsettings.json
        healthcheck:
            test: ["CMD-SHELL", "curl --fail http://localhost:5000 || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 3

    API_PROD:
        image: giraf/web-api:1  # this will use an locally build image of the API it sould be moved to hub.docker.com once the API is ready for production.
        networks:         # uses both the frontend and backend network
            - frontend
            - backend
        environment:
            ASPNETCORE_ENVIRONMENT: Production
        deploy:
            replicas: 3
        volumes:
            - /swarm-nfs/cdn/pictograms/:/pictograms
            - /swarm-nfs/api/appsettings.Develop.json:/srv/appsettings.json
        healthcheck:
            test: ["CMD-SHELL", "curl --fail http://localhost:5000 || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 3

    API_DEV:
        image: giraf/web-api:1  # this will use an locally build image of the API it sould be moved to hub.docker.com once the API is ready for production.
        networks:         # uses both the frontend and backend network
            - frontend
            - backend
        environment:
            ASPNETCORE_ENVIRONMENT: Production
        deploy:
            replicas: 3
        volumes:
            - /swarm-nfs/cdn/pictograms/:/pictograms
            - /swarm-nfs/api/appsettings.Develop.json:/srv/appsettings.json
        healthcheck:
            test: ["CMD-SHELL", "curl --fail http://localhost:5000 || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 3

    API_TEST:
        image: giraf/web-api:1  # this will use an locally build image of the API it sould be moved to hub.docker.com once the API is ready for production.
        networks:         # uses both the frontend and backend network
            - frontend
            - backend
        environment:
            ASPNETCORE_ENVIRONMENT: Production
        deploy:
            replicas: 1
        volumes:
            - /swarm-nfs/cdn/pictograms/:/pictograms
            - /swarm-nfs/api/appsettings.Develop.json:/srv/appsettings.json
        healthcheck:
            test: ["CMD-SHELL", "curl --fail http://localhost:5000 || exit 1"]
            interval: 10s
            timeout: 10s
            retries: 3

    DB:                   # The DB service will be changed to use the production database later once it has been migrated. The httpd image is only for testing.
        image: mysql:5.7.11
        command: --default-authentication-plugin=mysql_native_password
        volumes: 
            - /swarm-nfs/mysql/:/var/lib/mysql/
        environment:
            MYSQL_ROOT_PASSWORD: <password>
        networks:
            - backend
        deploy:
            restart_policy:
                condition: on-failure

networks:
    frontend: # creates a new network for frontend traffic
    backend:  # creates a new network for backend traffic
